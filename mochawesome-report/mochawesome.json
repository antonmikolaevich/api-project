{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2022-10-30T18:58:50.121Z",
    "end": "2022-10-30T18:58:51.633Z",
    "duration": 1512,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "2606170e-ce7a-4c8a-bccc-77c4393a59be",
      "title": "",
      "fullFile": "D:\\Automation Program Global - Advanced\\Homework 7 - CI-CD\\api-project\\test.spec.js",
      "file": "\\test.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
          "title": "API tests in ReportPortal",
          "fullFile": "D:\\Automation Program Global - Advanced\\Homework 7 - CI-CD\\api-project\\test.spec.js",
          "file": "\\test.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "API test - get token",
              "fullTitle": "API tests in ReportPortal API test - get token",
              "timedOut": false,
              "duration": 481,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const authToken = await getToken(\"post\", dataToken);\nexpect(typeof authToken.data.access_token).to.equal('string');\nexpect(authToken.data.access_token).not.to.empty;\nauthorizationToken = authToken.data.access_token;\nexpect(authToken.status).to.equal(200);",
              "err": {},
              "uuid": "fa223368-cceb-4a4f-b650-8236403a0b9f",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API tests - create the widget",
              "fullTitle": "API tests in ReportPortal API tests - create the widget",
              "timedOut": false,
              "duration": 209,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createWidget = await sendingRequest(\"post\", \"superadmin_personal/widget\", data, `${authorizationToken}`);\ncreatedWidgetId = createWidget.data.id;\nconst getWidget = await sendingRequest(\"get\", `superadmin_personal/widget/${createdWidgetId}`, null, `${authorizationToken}`);\nexpect(getWidget.data.name).to.equal(data.name);\nexpect(getWidget.data.description).to.equal(data.description);\nexpect(createWidget.status).to.equal(201);",
              "err": {},
              "uuid": "9f10fff8-c778-4855-9c85-a8add9f0b3f9",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API tests - update the widget",
              "fullTitle": "API tests in ReportPortal API tests - update the widget",
              "timedOut": false,
              "duration": 168,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updateWidget = await sendingRequest(\"put\", `superadmin_personal/widget/${createdWidgetId}`, updateWidgetData, `${authorizationToken}`);\nconst getWidget = await sendingRequest(\"get\", `superadmin_personal/widget/${createdWidgetId}`, null, `${authorizationToken}`);\nexpect(getWidget.data.name).to.equal(updateWidgetData.name);\nexpect(getWidget.data.description).to.equal(updateWidgetData.description);\nexpect(updateWidget.status).to.equal(200);",
              "err": {},
              "uuid": "2ed23c18-d181-40b0-b3a9-3ecc9324bf12",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API tests - delete the widget",
              "fullTitle": "API tests in ReportPortal API tests - delete the widget",
              "timedOut": false,
              "duration": 289,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteWidget = await sendingRequest(\"delete\", `superadmin_personal/dashboard/58/${createdWidgetId}`, null, `${authorizationToken}`);\nexpect(deleteWidget.status).to.equal(200);\nconst getWidget = await sendingRequest(\"get\", `superadmin_personal/widget/${createdWidgetId}`, null, `${authorizationToken}`);\nexpect(getWidget.status).to.equal(404);\nexpect(getWidget.data.message).to.equal(`Widget with ID '${createdWidgetId}' not found on project 'superadmin_personal'. Did you use correct Widget ID?`);",
              "err": {},
              "uuid": "9e92b69b-baf7-47d0-97e4-ca00651cca54",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API tests - create the dashboard",
              "fullTitle": "API tests in ReportPortal API tests - create the dashboard",
              "timedOut": false,
              "duration": 121,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createDashboard = await sendingRequest(\"post\", 'SUPERADMIN_PERSONAL/dashboard', dashboardData, `${authorizationToken}`);\ndashboardId = createDashboard.data.id;\nexpect(createDashboard.status).to.equal(201);\nconst getDashboard = await sendingRequest(\"get\", `SUPERADMIN_PERSONAL/dashboard/${dashboardId}`, null, `${authorizationToken}`);\nexpect(getDashboard.status).to.equal(200);\nexpect(getDashboard.data.description).to.equal(dashboardData.description);\nexpect(getDashboard.data.name).to.equal(dashboardData.name);",
              "err": {},
              "uuid": "f67e87c2-cfc4-4c08-b9e4-329ba18de376",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API tests - update the dashboard",
              "fullTitle": "API tests in ReportPortal API tests - update the dashboard",
              "timedOut": false,
              "duration": 83,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updateDashboard = await sendingRequest(\"put\", `SUPERADMIN_PERSONAL/dashboard/${dashboardId}`, updateDashboardData, `${authorizationToken}`);\nexpect(updateDashboard.status).to.equal(200);\nconst getDashboard = await sendingRequest(\"get\", `SUPERADMIN_PERSONAL/dashboard/${dashboardId}`, null, `${authorizationToken}`);\nexpect(getDashboard.status).to.equal(200);\nexpect(getDashboard.data.description).to.equal(updateDashboardData.description);\nexpect(getDashboard.data.name).to.equal(updateDashboardData.name);",
              "err": {},
              "uuid": "4ffe18d8-e07a-4d8f-a395-5406eb393ca1",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API tests - delete the dashboard",
              "fullTitle": "API tests in ReportPortal API tests - delete the dashboard",
              "timedOut": false,
              "duration": 70,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const updateDashboard = await sendingRequest(\"delete\", `SUPERADMIN_PERSONAL/dashboard/${dashboardId}`, null, `${authorizationToken}`);\nexpect(updateDashboard.status).to.equal(200);\nconst getDashboard = await sendingRequest(\"get\", `SUPERADMIN_PERSONAL/dashboard/${dashboardId}`, null, `${authorizationToken}`);\nexpect(getDashboard.status).to.equal(404);\nexpect(getDashboard.data.message).to.equal(`Dashboard with ID '${dashboardId}' not found on project 'superadmin_personal'. Did you use correct Dashboard ID?`);",
              "err": {},
              "uuid": "7a5ad41d-5ac5-41d7-8544-a68bdddce633",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API tests - create the widget with incorrect request data",
              "fullTitle": "API tests in ReportPortal API tests - create the widget with incorrect request data",
              "timedOut": false,
              "duration": 32,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createWidget = await sendingRequest(\"post\", \"superadmin_personal/widget\", incorrectData, `${authorizationToken}`);\nexpect(createWidget.status).to.equal(400);\nexpect(createWidget.data.message).to.contain('Incorrect Request');",
              "err": {},
              "uuid": "c49a5959-333b-4387-9e54-a3cfb9766aae",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "API tests - create the dashboard with incorrect request data",
              "fullTitle": "API tests in ReportPortal API tests - create the dashboard with incorrect request data",
              "timedOut": false,
              "duration": 27,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const createDashboard = await sendingRequest(\"post\", 'SUPERADMIN_PERSONAL/dashboard', incorrectDashboardData, `${authorizationToken}`);\nexpect(createDashboard.status).to.equal(400);\nexpect(createDashboard.data.message).to.contain('Incorrect Request');",
              "err": {},
              "uuid": "810d4684-602e-4135-b9df-813553d4b586",
              "parentUUID": "d2feb38b-48bc-4e38-b5ce-ff4658da1153",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "fa223368-cceb-4a4f-b650-8236403a0b9f",
            "9f10fff8-c778-4855-9c85-a8add9f0b3f9",
            "2ed23c18-d181-40b0-b3a9-3ecc9324bf12",
            "9e92b69b-baf7-47d0-97e4-ca00651cca54",
            "f67e87c2-cfc4-4c08-b9e4-329ba18de376",
            "4ffe18d8-e07a-4d8f-a395-5406eb393ca1",
            "7a5ad41d-5ac5-41d7-8544-a68bdddce633",
            "c49a5959-333b-4387-9e54-a3cfb9766aae",
            "810d4684-602e-4135-b9df-813553d4b586"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1480,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.0.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}